name: Validate Template Submissions

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'templates/*.json'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-template:
    runs-on: ubuntu-latest
    if: startsWith(github.event.pull_request.title, 'Add template:')
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      run: |
        # Get the base branch
        git fetch origin ${{ github.event.pull_request.base.ref }}
        
        # Get changed files using GitHub API instead of git
        echo "Getting changed files from GitHub API..."
        
        # Use GitHub CLI to get PR files
        gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' > all_changed_files.txt
        
        echo "All changed files:"
        cat all_changed_files.txt
        
        # Filter for template files
        grep '^templates/.*\.json$' all_changed_files.txt > template_files.txt || touch template_files.txt
        
        # Check for non-template files
        grep -v '^templates/.*\.json$' all_changed_files.txt > non_template_files.txt || touch non_template_files.txt
        
        # Set environment variables
        if [[ -s non_template_files.txt ]]; then
          echo "‚ùå Non-template files detected:"
          cat non_template_files.txt
          echo "SAFE_CHANGES=false" >> $GITHUB_ENV
        else
          echo "‚úÖ Only template files changed"
          echo "SAFE_CHANGES=true" >> $GITHUB_ENV
        fi
        
        if [[ -s template_files.txt ]]; then
          echo "TEMPLATE_FILES_CHANGED=true" >> $GITHUB_ENV
        else
          echo "TEMPLATE_FILES_CHANGED=false" >> $GITHUB_ENV
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Validate template files
      if: env.TEMPLATE_FILES_CHANGED == 'true'
      run: |
        echo "Validating template submissions..."
        valid=true
        
        # Install jq for JSON validation
        sudo apt-get update && sudo apt-get install -y jq
        
        # Process each changed template file
        while IFS= read -r file; do
          echo "Validating $file"
          
          # Check if file exists
          if [[ ! -f "$file" ]]; then
            echo "‚ùå File $file does not exist"
            valid=false
            continue
          fi
          
          # Validate JSON structure
          if ! jq empty "$file" 2>/dev/null; then
            echo "‚ùå File $file is not valid JSON"
            valid=false
            continue
          fi
          
          # Check required template fields
          if ! jq -e '.id and .name and .images and .tiers' "$file" >/dev/null; then
            echo "‚ùå File $file missing required template fields (id, name, images, tiers)"
            valid=false
            continue
          fi
          
          # Check template ID matches filename
          template_id=$(jq -r '.id' "$file")
          filename=$(basename "$file" .json)
          if [[ "$template_id" != "$filename" ]]; then
            echo "‚ùå Template ID ($template_id) doesn't match filename ($filename)"
            valid=false
            continue
          fi
          
          # Check for reasonable limits
          image_count=$(jq '.images | length' "$file")
          if [[ $image_count -gt 1000 ]]; then
            echo "‚ùå Template has too many images ($image_count > 1000)"
            valid=false
            continue
          fi
          
          tier_count=$(jq '.tiers | length' "$file")
          if [[ $tier_count -gt 50 ]]; then
            echo "‚ùå Template has too many tiers ($tier_count > 50)"
            valid=false
            continue
          fi
          
          # Check file size (should be reasonable)
          file_size=$(stat -c%s "$file")
          if [[ $file_size -gt 10485760 ]]; then  # 10MB limit
            echo "‚ùå Template file too large (${file_size} bytes > 10MB)"
            valid=false
            continue
          fi
          
          echo "‚úÖ File $file is valid"
        done < template_files.txt
        
        if [[ "$valid" == "true" ]]; then
          echo "‚úÖ All template files are valid"
          echo "VALIDATION_PASSED=true" >> $GITHUB_ENV
        else
          echo "‚ùå Validation failed"
          echo "VALIDATION_PASSED=false" >> $GITHUB_ENV
        fi

    - name: Auto-approve and merge on success
      if: env.VALIDATION_PASSED == 'true' && env.SAFE_CHANGES == 'true'
      run: |
        echo "All validations passed. Auto-approving and merging..."
        
        # Add approval review
        gh pr review ${{ github.event.pull_request.number }} --approve --body "‚úÖ **Automated validation passed!**

        All template validation checks have passed:
        - ‚úÖ Valid JSON structure
        - ‚úÖ Required fields present  
        - ‚úÖ Template ID matches filename
        - ‚úÖ Within size limits
        - ‚úÖ Safe changes only

        This PR has been automatically approved and will be merged."
        
        # Wait a moment for the review to register
        sleep 2
        
        # Merge the PR directly
        gh pr merge ${{ github.event.pull_request.number }} --squash --delete-branch
        
        echo "‚úÖ PR #${{ github.event.pull_request.number }} successfully merged!"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Add validation labels
      if: env.VALIDATION_PASSED == 'true' && env.SAFE_CHANGES == 'true'
      run: |
        # Add labels to indicate validation passed
        gh pr edit ${{ github.event.pull_request.number }} --add-label "validation-passed,auto-merged"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Comment on validation failure
      if: env.VALIDATION_PASSED == 'false' || env.SAFE_CHANGES == 'false'
      run: |
        comment="‚ùå **Template validation failed**\n\n"
        
        if [[ "${{ env.VALIDATION_PASSED }}" == "false" ]]; then
          comment+="**Template validation errors detected.** Please check that your template:\n"
          comment+="- ‚úÖ Is valid JSON\n"
          comment+="- ‚úÖ Contains required fields: id, name, images, tiers\n"
          comment+="- ‚úÖ Has template ID matching the filename\n"
          comment+="- ‚úÖ Doesn't exceed size limits (1000 images, 50 tiers, 10MB file)\n\n"
        fi
        
        if [[ "${{ env.SAFE_CHANGES }}" == "false" ]]; then
          comment+="**Unsafe changes detected.** This PR:\n"
          comment+="- ‚úÖ Should only add new template JSON files\n"
          comment+="- ‚úÖ Should not modify existing files\n"
          comment+="- ‚úÖ Should only touch the templates/ directory\n\n"
        fi
        
        comment+="Please fix these issues and push updates to this PR for re-validation."
        
        gh pr comment ${{ github.event.pull_request.number }} --body "$comment"
        
        # Add failure label
        gh pr edit ${{ github.event.pull_request.number }} --add-label "validation-failed"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Add success comment
      if: env.VALIDATION_PASSED == 'true' && env.SAFE_CHANGES == 'true'
      run: |
        gh pr comment ${{ github.event.pull_request.number }} --body "üéâ **Template validation passed and PR merged!** ‚úÖ

        Your template has been automatically validated and **successfully merged** into the main repository!

        **Validation Results:**
        - ‚úÖ Valid JSON structure
        - ‚úÖ Required fields present
        - ‚úÖ Template ID matches filename
        - ‚úÖ Within size limits
        - ‚úÖ Safe changes only

        Your template is now live and available to all TierMaker2 users! Thank you for your contribution! üöÄ"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}